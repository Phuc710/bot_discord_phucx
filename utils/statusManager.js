// ‚úÖ StatusManager.js - Enhanced v·ªõi Voice Status API
const { ActivityType } = require('discord.js');
const axios = require('axios');

const PRESENCE_PREFIX = 'üéß';
const CHANNEL_PREFIX = 'üí´';
const CHANNEL_EMOJI = 'üé∂';

class StatusManager {
    constructor(client) {
        this.client = client;
        this.isPlaying = false;
        this.activeVoiceStatus = null;
        this.voiceChannelData = new Map(); // L∆∞u tr·∫°ng th√°i g·ªëc c·ªßa channel
        this.topicRateLimit = {};
    }

    // ‚öôÔ∏è Hi·ªÉn th·ªã t·ªïng s·ªë server
    async setServerCountStatus(serverCount) {
        if (this.isPlaying) return;
        try {
            await this.client.user.setPresence({
                activities: [{
                    name: ` Music | /help`,
                    type: ActivityType.Listening
                }],
                status: 'online'
            });
            console.log(`[STATUS] ‚úÖ ƒê·∫∑t tr·∫°ng th√°i m·∫∑c ƒë·ªãnh: üéß Music | /help (${serverCount} server)`);
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói khi ƒë·∫∑t tr·∫°ng th√°i server:', error.message);
        }
    }

    // üéµ Khi bot ƒëang ph√°t nh·∫°c
    async setMusicStatus(songName, options = {}) {
        const {
            voiceChannel = null,
            presencePrefix = PRESENCE_PREFIX,
            channelPrefix = CHANNEL_PREFIX,
            channelEmoji = { name: CHANNEL_EMOJI }
        } = options;

        try {
            this.isPlaying = true;
            const activityName = `üé∂ ${songName}`.slice(0, 128);

            await this.client.user.setPresence({
                activities: [{
                    name: activityName,
                    type: ActivityType.Listening
                }],
                status: 'online'
            });

            // Update voice channel status
            await this.setVoiceChannelStatus(voiceChannel, songName, {
                prefix: channelPrefix,
                emoji: channelEmoji
            });

            console.log(`[STATUS] üé∂ ƒêang ph√°t: ${songName}`);
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói khi ƒë·∫∑t tr·∫°ng th√°i nh·∫°c:', error.message);
        }
    }

    // üßπ Khi d·ª´ng nh·∫°c
    async clearMusicStatus() {
        try {
            this.isPlaying = false;
            await this.clearVoiceChannelStatus();
            const serverCount = this.client.guilds.cache.size;
            await this.setServerCountStatus(serverCount);
            console.log('[STATUS] üßπ ƒê√£ x√≥a tr·∫°ng th√°i nghe nh·∫°c, tr·ªü v·ªÅ m·∫∑c ƒë·ªãnh');
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói khi x√≥a tr·∫°ng th√°i:', error.message);
        }
    }

    // üéØ Tr·∫°ng th√°i t√πy ch·ªânh
    async setCustomStatus(activity, type = 'Listening') {
        if (this.isPlaying) return;
        try {
            await this.client.user.setPresence({
                activities: [{
                    name: activity,
                    type: ActivityType[type] || ActivityType.Listening
                }],
                status: 'online'
            });
            console.log(`[STATUS] ‚úÖ ƒê·∫∑t tr·∫°ng th√°i t√πy ch·ªânh: ${activity}`);
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói khi ƒë·∫∑t tr·∫°ng th√°i t√πy ch·ªânh:', error.message);
        }
    }

    getIsPlaying() {
        return this.isPlaying;
    }

    setIsPlaying(playing) {
        this.isPlaying = playing;
    }

    // üé∏ === C√ÅC H√ÄM M·ªöI: X·ª¨ L√ù VOICE CHANNEL STATUS ===

    /**
     * ƒê·∫∑t tr·∫°ng th√°i cho voice channel khi ph√°t nh·∫°c
     * ∆Øu ti√™n: Voice Status API > Topic > T√™n Channel
     */
    async setVoiceChannelStatus(voiceChannel, trackTitle, options = {}) {
        if (!voiceChannel) return;

        const channel = typeof voiceChannel === 'string'
            ? this.client.channels.cache.get(voiceChannel)
            : voiceChannel;

        if (!channel) return;

        const { prefix = CHANNEL_PREFIX, emoji = { name: CHANNEL_EMOJI } } = options;
        const statusText = `${prefix} ${trackTitle}`.trim().slice(0, 300);

        // Ki·ªÉm tra quy·ªÅn
        const botMember = channel.guild.members.cache.get(this.client.user.id);
        if (!botMember?.permissions.has('ManageChannels')) {
            console.warn(`[STATUS] ‚ö†Ô∏è Bot thi·∫øu quy·ªÅn MANAGE_CHANNELS trong ${channel.name}`);
            return;
        }

        // L∆∞u tr·∫°ng th√°i g·ªëc n·∫øu ch∆∞a c√≥
        if (!this.voiceChannelData.has(channel.id)) {
            this.voiceChannelData.set(channel.id, {
                originalName: channel.name,
                originalTopic: channel.topic ?? null,
                channelId: channel.id
            });
        }

        // Restore channel c≈© n·∫øu kh√°c
        if (this.activeVoiceStatus && this.activeVoiceStatus.channelId !== channel.id) {
            await this.clearVoiceChannelStatus();
        }

        this.activeVoiceStatus = {
            channelId: channel.id,
            method: null // S·∫Ω ƒë∆∞·ª£c set sau khi th√†nh c√¥ng
        };

        // 1Ô∏è‚É£ ∆Øu ti√™n: Voice Status API
        let success = await this.createVoiceStatusAPI(channel, statusText);
        if (success) {
            this.activeVoiceStatus.method = 'api';
            console.log(`[STATUS] üé§ Voice Status API: ${channel.name}`);
            return;
        }

        // 2Ô∏è‚É£ Fallback: ƒê·ªïi Topic
        success = await this.createChannelTopic(channel, statusText, emoji);
        if (success) {
            this.activeVoiceStatus.method = 'topic';
            console.log(`[STATUS] üí¨ Topic updated: ${channel.name}`);
            return;
        }

        // 3Ô∏è‚É£ Fallback cu·ªëi: ƒê·ªïi t√™n Channel
        success = await this.createChannelName(channel, trackTitle);
        if (success) {
            this.activeVoiceStatus.method = 'name';
            console.log(`[STATUS] üìù Channel renamed: ${channel.name}`);
            return;
        }

        console.warn(`[STATUS] ‚ö†Ô∏è Kh√¥ng th·ªÉ update voice channel status`);
    }

    /**
     * X√≥a tr·∫°ng th√°i voice channel khi d·ª´ng nh·∫°c
     */
    async clearVoiceChannelStatus() {
        if (!this.activeVoiceStatus) return;

        const { channelId, method } = this.activeVoiceStatus;
        const channel = this.client.channels.cache.get(channelId);
        
        if (!channel) {
            this.activeVoiceStatus = null;
            this.voiceChannelData.delete(channelId);
            return;
        }

        try {
            switch (method) {
                case 'api':
                    await this.deleteVoiceStatusAPI(channel);
                    console.log(`[STATUS] üîÅ Voice Status API cleared: ${channel.name}`);
                    break;
                
                case 'topic':
                    await this.deleteChannelTopic(channel);
                    console.log(`[STATUS] üîÅ Topic restored: ${channel.name}`);
                    break;
                
                case 'name':
                    await this.deleteChannelName(channel);
                    console.log(`[STATUS] üîÅ Name restored: ${channel.name}`);
                    break;
            }
        } catch (error) {
            console.error(`[STATUS] ‚ùå L·ªói khi restore voice channel:`, error.message);
        } finally {
            this.activeVoiceStatus = null;
            this.voiceChannelData.delete(channelId);
        }
    }

    // === PH∆Ø∆†NG PH√ÅP 1: VOICE STATUS API ===
    async createVoiceStatusAPI(channel, statusText) {
        try {
            const endpoint = `https://discord.com/api/v10/channels/${channel.id}/voice-status`;
            
            await axios.put(endpoint, 
                { status: statusText },
                {
                    headers: {
                        'Authorization': `Bot ${this.client.token}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 5000
                }
            );
            
            return true;
        } catch (error) {
            if (error.response?.status === 404) {
                console.log(`[STATUS] ‚ÑπÔ∏è Voice Status API kh√¥ng kh·∫£ d·ª•ng cho server n√†y`);
            } else if (error.response?.status === 50013) {
                console.warn(`[STATUS] ‚ö†Ô∏è Thi·∫øu quy·ªÅn Voice Status API`);
            } else {
                console.warn(`[STATUS] ‚ö†Ô∏è Voice Status API error:`, error.message);
            }
            return false;
        }
    }

    async deleteVoiceStatusAPI(channel) {
        try {
            const endpoint = `https://discord.com/api/v10/channels/${channel.id}/voice-status`;
            
            await axios.put(endpoint, 
                { status: '' }, // Empty string ƒë·ªÉ x√≥a
                {
                    headers: {
                        'Authorization': `Bot ${this.client.token}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 5000
                }
            );
            
            return true;
        } catch (error) {
            return false;
        }
    }

    // === PH∆Ø∆†NG PH√ÅP 2: TOPIC ===
    async createChannelTopic(channel, statusText, emoji) {
        try {
            if (typeof channel.setTopic !== 'function') {
                return false;
            }

            // Rate limit check
            const now = Date.now();
            const lastUpdate = this.topicRateLimit[channel.id] || 0;
            const timeSinceLastUpdate = now - lastUpdate;
            
            if (timeSinceLastUpdate < 300000) { // 5 ph√∫t
                console.log(`[STATUS] ‚è≥ Topic rate limit: ch·ªù ${Math.ceil((300000 - timeSinceLastUpdate) / 1000)}s`);
                return false;
            }

            const emojiStr = emoji?.name || CHANNEL_EMOJI;
            const newTopic = `${emojiStr} ${statusText}`.trim();
            
            if (channel.topic === newTopic) {
                return true; // ƒê√£ ƒë√∫ng r·ªìi
            }

            await channel.setTopic(newTopic);
            this.topicRateLimit[channel.id] = now;
            
            return true;
        } catch (error) {
            if (error.code === 50013) {
                console.warn('[STATUS] ‚ö†Ô∏è Thi·∫øu quy·ªÅn ƒë·ªïi topic');
            } else if (error.code === 429) {
                console.warn('[STATUS] ‚ö†Ô∏è Topic rate limited');
            }
            return false;
        }
    }

    async deleteChannelTopic(channel) {
        try {
            if (typeof channel.setTopic !== 'function') {
                return false;
            }

            const originalData = this.voiceChannelData.get(channel.id);
            if (!originalData) return false;

            await channel.setTopic(originalData.originalTopic ?? null);
            return true;
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói restore topic:', error.message);
            return false;
        }
    }

    // === PH∆Ø∆†NG PH√ÅP 3: T√äN CHANNEL ===
    async createChannelName(channel, trackTitle) {
        try {
            if (typeof channel.setName !== 'function') {
                return false;
            }

            // Rate limit check (name c√≥ gi·ªõi h·∫°n nghi√™m ng·∫∑t h∆°n)
            const now = Date.now();
            const lastUpdate = this.topicRateLimit[`name_${channel.id}`] || 0;
            const timeSinceLastUpdate = now - lastUpdate;
            
            if (timeSinceLastUpdate < 600000) { // 10 ph√∫t
                console.log(`[STATUS] ‚è≥ Name rate limit: ch·ªù ${Math.ceil((600000 - timeSinceLastUpdate) / 1000)}s`);
                return false;
            }

            const originalData = this.voiceChannelData.get(channel.id);
            const baseName = originalData?.originalName || channel.name;
            
            // T·∫°o t√™n m·ªõi v·ªõi emoji v√† gi·ªõi h·∫°n ƒë·ªô d√†i
            const newName = `üé∏ ${trackTitle}`.slice(0, 100);
            
            if (channel.name === newName) {
                return true; // ƒê√£ ƒë√∫ng r·ªìi
            }

            await channel.setName(newName);
            this.topicRateLimit[`name_${channel.id}`] = now;
            
            return true;
        } catch (error) {
            if (error.code === 50013) {
                console.warn('[STATUS] ‚ö†Ô∏è Thi·∫øu quy·ªÅn ƒë·ªïi t√™n channel');
            } else if (error.code === 429) {
                console.warn('[STATUS] ‚ö†Ô∏è Name rate limited');
            }
            return false;
        }
    }

    async deleteChannelName(channel) {
        try {
            if (typeof channel.setName !== 'function') {
                return false;
            }

            const originalData = this.voiceChannelData.get(channel.id);
            if (!originalData) return false;

            // Ch·ªâ restore n·∫øu t√™n hi·ªán t·∫°i kh√°c v·ªõi t√™n g·ªëc
            if (channel.name !== originalData.originalName) {
                await channel.setName(originalData.originalName);
            }
            
            return true;
        } catch (error) {
            console.error('[STATUS] ‚ùå L·ªói restore name:', error.message);
            return false;
        }
    }

    // === H√ÄM T∆Ø∆†NG TH√çCH V·ªöI CODE C≈® ===
    async applyVoiceChannelStatus(voiceChannel, statusPayload = {}) {
        const text = statusPayload.text || '';
        const emoji = statusPayload.emoji || { name: CHANNEL_EMOJI };
        await this.setVoiceChannelStatus(voiceChannel, text, { prefix: '', emoji });
    }

    async restoreVoiceChannelStatus() {
        await this.clearVoiceChannelStatus();
    }

    // Wrapper functions cho Lavalink/DisTube
    async onTrackStart(player, track, options = {}) {
        const songName = track.info?.title || track.name || 'Unknown Track';
        await this.setMusicStatus(songName, options);
    }

    async onTrackEnd(player, options = {}) {
        if (options.final) {
            await this.clearMusicStatus();
        }
    }
}

module.exports = StatusManager;